Tray Class
	myBlocks= Arraylist of Blocks
		Length: number of blocks in the tray
		Contents: blocks that are in the tray (not sorted)
	
	myBlockLocations = Arraylist Matrix of Booleans
		Shows us which cells are empty and which are filled with blocks.
	
	
	addBlock method (Block blockToAdd)
		Adds a block to myBlocks and label it with n that is one greater than the label of
		the last block that was added. For each cell in myBlockLocations that it should occupy
		the cell is turned to true.
	
	findNextConfigurations: Returns a list of all the next possible configurations.
				A move of one space produces a different result from a move of two or more spaces.
	
	compareTo (Tray otherTray) method: 
		Returns true if this tray configuration is the same as the other tray. Possibly compare hashcodes
		of tray objects?
	
	isOK method: Checks to makes sure there are no overlapping blocks.

Block Class
	myRow= row of block position
	myCol= col of block position
	myHeight = height of block
	myWidth = width of block
	myLabel= The block was the nth added block to a tray where n is myLabel.

Solver Class

	Graph:
		Vertices- Possible tray configurations. 
		Edges - The change that occurs when moving one block's position. An edge is created between two trays
				which are one move away from each other. Every edge has weight of one.
				
	makeGraph method (Tray currentTray)
		Takes current configuration, calls addConfigurations on it. While goal configuration is
		not in the graph, call recursively call addCOnfigurations on the configurations we just
		added.
						
	addConfigurations method (Tray currentTray) 
		Take the current configuration, call findNextConfigurations on it to get an arraylist of next
		possible configurations. For each next configuration, if it is already in the graph, delete
		it from the arraylist, else, put it in the graph. Connect the current configuration
		to the next possible configuration with an edge.
	
	shortestPath method(Tray initialTray, Tray goalTray)
		Finds the shortest path from the current configuration to the goal configuration.
		Only go to unvisited vertices to prevent going in circles.
		